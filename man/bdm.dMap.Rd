% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bdm_dMap.R
\name{bdm.dMap}
\alias{bdm.dMap}
\title{Class density maps}
\usage{
bdm.dMap(data = NULL, bdm, mpi.cl = NULL, threads = 4, layer = 1)
}
\arguments{
\item{data}{A vector of discret covariates or class labels. The covariate values can be of any factorizable type.}

\item{bdm}{A \var{bdm} data mapping instance.}

\item{mpi.cl}{An MPI (inter-node parallelization) cluster as returned by \var{bdm.mpi.start()}. Default value is \var{mpi.cl = NULL}, i.e. a 'SOCK' (intra-node parallelization) cluster is automatically generated.}

\item{threads}{Number of parallel threads (according to data size and hardware resources, i.e. number of cores and available memory). Default value is \var{threads = 4}.}

\item{layer}{The number of the t-SNE layer (1 by default).}
}
\value{
A \var{bdm} data mapping instance.
}
\description{
Compute the class density maps of a set of classes on the embedding grid. This function returns a fuzzy mapping of the set of classes on the grid cells.  The classes can be whatever set of classes of interest and must be given as a vector of point-wise discrete labels (either numeric, string or factor).
}
\details{
\var{bdm.dMap()} computes the join distribution \eqn{P(V=v_{i},C=c_{j})} where \eqn{V={v_{1},\dots,v_{l}}} is the discrete covariate and \eqn{C={c_{1},\dots, c_{g}}} are the grid cells of the paKDE raster. That is, this function recomputes the paKDE but keeping track of the covariate (or class) label of each data-point. This results in a fuzzy distribution of the covariate (class) at each cell.

Usually, figuring out the join distribution \eqn{P(V=v_{i},C=c_{j})} entails an intensive computation. Thus \var{bdm.dMap()} performs the computation and stores the result in a dedicated element named \var{$dMap}. Afterwards the class density maps can be visualized with the \var{bdm.dMap.plot()} function.
}
\examples{

# --- load example dataset
bdm.example()
\dontrun{
+++ compute the density map of the clustering
m <- bdm.dMap(bdm.labels(ex$map), ex$map, threads = 4)
}
}
